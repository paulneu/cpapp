"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const StableIdHelper_1 = require("../../v4/utils/StableIdHelper");
const __1 = require("..");
/**
 * Adds a field definition to the app specific schema
 * @param {string} sectionType - prefix to distinguish Section and HeaderSection
 * @param {object} appSchema - App schema in general
 * @param {DataFieldAbstractTypes} field - field definition in parser output (AVT)
 * @param {string} targetID - unique ID, identifies the parent object (form)
 * @param {string} key - current field key
 * @param {SectionType} section - current section of the object page
 */
function addField(sectionType, appSchema, field, targetID, key, section, isV2, withActions = true) {
    var _a, _b, _c, _d, _e;
    const fieldReferenceId = StableIdHelper_1.getStableIdPartFromDataField(field);
    const fieldReference = isV2 && fieldReferenceId && fieldReferenceId.includes('::')
        ? fieldReferenceId.split('::')[1]
        : fieldReferenceId;
    const fieldReferenceType = isV2 && fieldReferenceId && fieldReferenceId.includes('::') ? fieldReferenceId.split('::')[0] : undefined;
    const fieldDefinition = isV2
        ? `${fieldReferenceType}<${targetID}::${fieldReference}>`
        : `${targetID}::${fieldReference}`;
    const fieldsDefinition = `${sectionType}Fields<${targetID}>`;
    const actionsDefinition = `${sectionType}Actions<${targetID}>`;
    if (!field || !field.$Type) {
        return; // ToDo: Actions to be interpreted as Header or Footer Actions
    }
    else if (field.$Type === 'com.sap.vocabularies.UI.v1.DataFieldForAction' ||
        field.$Type === 'com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation') {
        if (withActions && sectionType === __1.SectionType.Section) {
            appSchema['definitions'][actionsDefinition]['properties'][fieldReference] = {
                $ref: __1.DEFINITION_LINK_PREFIX + fieldDefinition,
                propertyIndex: parseInt(key)
            };
        }
    }
    else {
        appSchema['definitions'][fieldsDefinition]['properties'][fieldReference] = {
            $ref: __1.DEFINITION_LINK_PREFIX + fieldDefinition,
            propertyIndex: parseInt(key)
        };
    }
    appSchema['definitions'][fieldDefinition] = {
        type: 'object',
        isViewNode: true,
        properties: {},
        description: __1.getDatafieldDescription(field, section.entityType),
        additionalProperties: false
    };
    if (field.$Type === 'com.sap.vocabularies.UI.v1.DataField' && ((_a = appSchema['definitions']) === null || _a === void 0 ? void 0 : _a['DataField'])) {
        appSchema['definitions'][fieldDefinition]['properties'] = appSchema['definitions']['DataField']['properties'];
    }
    if ((_c = (_b = field['Value']) === null || _b === void 0 ? void 0 : _b.$target) === null || _c === void 0 ? void 0 : _c.type) {
        appSchema['definitions'][fieldDefinition].dataType = (_e = (_d = field['Value']) === null || _d === void 0 ? void 0 : _d.$target) === null || _e === void 0 ? void 0 : _e.type;
    }
    appSchema['definitions'][fieldDefinition].annotationPath = `/${section.entityType.fullyQualifiedName}/${field.fullyQualifiedName.split(section.entityType.fullyQualifiedName)[1]}`;
}
/**
 * Adds definitions for forms in object page sections to the app schema
 * @param {SectionType} sectionType - prefix to distinguish Section and HeaderSection
 * @param {FacetConfig} section - facet or section in the FE core model
 * @param {object} appSchemaSection - current definition of facet or section in the JSON schema
 * @param {object} appSchema - app specific schema that gets enhanced
 */
function handleForm(sectionType, section, appSchemaSection, appSchema, isV2, withActions = true) {
    if (!section.target) {
        return;
    }
    const targetID = section.target && section.target['qualifier'] && section.entityType
        ? section.entityType.name + '::' + section.base + '::' + section.target['qualifier']
        : section.entityType
            ? section.entityType.name + '::' + section.base
            : section.ID;
    const formDefinition = `${sectionType}Form<${targetID}>`;
    const fieldsDefinition = `${sectionType}Fields<${targetID}>`;
    const actionsDefinition = `${sectionType}Actions<${targetID}>`;
    // Form definition
    appSchemaSection['properties']['form'] = {
        $ref: __1.DEFINITION_LINK_PREFIX + formDefinition
    };
    if (sectionType === __1.SectionType.Section && withActions) {
        appSchema['definitions'][formDefinition] = {
            type: 'object',
            properties: {
                actions: {
                    $ref: __1.DEFINITION_LINK_PREFIX + actionsDefinition
                },
                fields: { $ref: __1.DEFINITION_LINK_PREFIX + fieldsDefinition }
            },
            isViewNode: true,
            description: 'Form',
            additionalProperties: false
        };
        appSchema['definitions'][actionsDefinition] = {
            type: 'object',
            properties: {},
            isViewNode: true,
            description: 'Actions',
            additionalProperties: false
        };
    }
    else {
        appSchema['definitions'][formDefinition] = {
            type: 'object',
            properties: {
                fields: { $ref: __1.DEFINITION_LINK_PREFIX + fieldsDefinition }
            },
            isViewNode: true,
            description: 'Form',
            additionalProperties: false
        };
    }
    if (section.entityType && section.entityType.name) {
        appSchema['definitions'][formDefinition].annotationPath = __1.createAnnotationPath(section.entityType.fullyQualifiedName, section.target['term'], section.target['qualifier']);
    }
    // Fields definition
    appSchema['definitions'][fieldsDefinition] = {
        type: 'object',
        properties: {},
        isViewNode: true,
        description: 'Fields',
        additionalProperties: false
    };
    // Add fields
    if (section.base === __1.FacetBase.Identification) {
        for (const key in section.target) {
            const field = section.target[key];
            if (field) {
                addField(sectionType, appSchema, field, targetID, key, section, isV2, withActions);
            }
        }
    }
    else {
        for (const key in section.target['Data']) {
            const field = section.target['Data'][key];
            addField(sectionType, appSchema, field, targetID, key, section, isV2);
        }
    }
}
exports.handleForm = handleForm;
/**
 * Common routine to determine the name and the ID of a header action
 * @param action - action as given by AVT
 * @param entityType - entity type by AVT
 * @returns an object comprising action name and action id
 */
function getActionNameAndId(action, entityType) {
    let separatorIndex = action.lastIndexOf('/');
    if (separatorIndex === -1) {
        separatorIndex = action.lastIndexOf('.');
    }
    let actionName, actionId;
    if (separatorIndex > -1) {
        actionName = action.substr(separatorIndex + 1);
        actionId = action.substr(0, separatorIndex) + '::' + actionName;
    }
    else {
        actionName = action;
        const namespace = entityType.fullyQualifiedName.split(entityType.name)[0];
        actionId = namespace.substr(0, namespace.length - 1) + '::' + actionName;
    }
    return { actionName, actionId };
}
exports.getActionNameAndId = getActionNameAndId;
//# sourceMappingURL=objectPage.js.map