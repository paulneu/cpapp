"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
const import_1 = require("../import");
const common_1 = require("../../common");
const i18next_1 = __importDefault(require("i18next"));
const i18n_1 = require("../../../i18n/i18n");
const v2_1 = require("../../../v2");
const types_1 = require("../types");
/**
 * Generates an app specific schema for the FE V2 Listreport from the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 *
 * @param {object} genericSchema - generic JSON schema of a list report
 * @param {string} entityTypeName - the base entity type of the given page
 * @param {EntityType[]} entityTypes - list of all entity types
 * @param {object} manifest - manifest.json of the given application
 * @param {FileData[]} fragments - list of fragment files and their content
 * @param {ExtensionLogger} logger - Logger class for logging messages
 * @param {string} appId - application ID
 *
 * @returns appSchema - the application specific JSON schema
 */
function generateListReportSchemaV2(genericSchema, entityTypeName, entityTypes, manifest, fragments, logger) {
    // Initialize i18next
    i18n_1.initI18n();
    const appSchema = JSON.parse(JSON.stringify(genericSchema));
    appSchema['properties']['table']['anyOf']['0']['$ref'] = common_1.DEFINITION_LINK_PREFIX + types_1.MULTISELECTTABLE;
    appSchema['properties']['table']['anyOf']['1']['$ref'] = common_1.DEFINITION_LINK_PREFIX + types_1.INLINEDELETETABLE;
    appSchema['properties']['table']['anyOf']['2']['$ref'] = common_1.DEFINITION_LINK_PREFIX + types_1.TREETABLE;
    appSchema['properties']['table']['anyOf']['3']['$ref'] = common_1.DEFINITION_LINK_PREFIX + types_1.ANALYTICALTABLE;
    appSchema['properties']['table']['anyOf']['4']['$ref'] = common_1.DEFINITION_LINK_PREFIX + types_1.GRIDTABLE;
    const responsiveTableMultiSelect = JSON.parse(JSON.stringify(genericSchema['definitions']['ResponsiveTableWithMultiSelect']));
    const responsiveTableInlineDelete = JSON.parse(JSON.stringify(genericSchema['definitions']['ResponsiveTableWithInlineDelete']));
    const treeTableDefinition = JSON.parse(JSON.stringify(genericSchema['definitions']['TreeTable']));
    const analyticalTableDefinition = JSON.parse(JSON.stringify(genericSchema['definitions']['AnalyticalTable']));
    const gridTableDefinition = JSON.parse(JSON.stringify(genericSchema['definitions']['GridTable']));
    const lrLineItems = {
        $ref: common_1.DEFINITION_LINK_PREFIX + 'LineItems'
    };
    responsiveTableMultiSelect['properties']['columns'] = lrLineItems;
    responsiveTableInlineDelete['properties']['columns'] = lrLineItems;
    treeTableDefinition['properties']['columns'] = lrLineItems;
    analyticalTableDefinition['properties']['columns'] = lrLineItems;
    gridTableDefinition['properties']['columns'] = lrLineItems;
    const lrToolBar = common_1.DEFINITION_LINK_PREFIX + common_1.TOOLBAR;
    appSchema['definitions'][types_1.MULTISELECTTABLE] = responsiveTableMultiSelect;
    appSchema['definitions'][types_1.MULTISELECTTABLE].properties.toolBar.$ref = lrToolBar;
    appSchema['definitions'][types_1.INLINEDELETETABLE] = responsiveTableInlineDelete;
    appSchema['definitions'][types_1.INLINEDELETETABLE].properties.toolBar.$ref = lrToolBar;
    appSchema['definitions'][types_1.TREETABLE] = treeTableDefinition;
    appSchema['definitions'][types_1.TREETABLE].properties.toolBar.$ref = lrToolBar;
    appSchema['definitions'][types_1.ANALYTICALTABLE] = analyticalTableDefinition;
    appSchema['definitions'][types_1.ANALYTICALTABLE].properties.toolBar.$ref = lrToolBar;
    appSchema['definitions'][types_1.GRIDTABLE] = gridTableDefinition;
    appSchema['definitions'][types_1.GRIDTABLE].properties.toolBar.$ref = lrToolBar;
    const entityType = entityTypes.find((et) => et.name === entityTypeName);
    if (!entityType) {
        v2_1.log(logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOENTITYTYPE', { entityType: entityTypeName }),
            location: {
                path: common_1.METADATAPATH
            }
        });
    }
    else {
        //handle line items
        const lineItemAnnotation = entityType.annotations && entityType.annotations.UI && entityType.annotations.UI.LineItem;
        utils_1.addLineItemsType(appSchema, lineItemAnnotation, entityType);
        //add fields for createWithParameterDialog
        common_1.addFieldsType(appSchema, entityType);
        const pageKeys = [];
        const v2Page = import_1.findListReportPageV2(manifest[v2_1.ManifestSection.generic].pages, pageKeys);
        if (!v2Page) {
            v2_1.log(logger, {
                severity: "error" /* Error */,
                message: i18next_1.default.t('NOALP'),
                location: {
                    path: v2_1.MANIFESTPATH,
                    range: [v2_1.ManifestSection.generic]
                }
            });
            return;
        }
        utils_1.addListReportColumnExtensions(appSchema, entityType, v2Page, manifest, fragments);
        //Delete generic definitions
        delete appSchema['definitions']['ResponsiveTableWithMultiSelect'];
        delete appSchema['definitions']['ResponsiveTableWithInlineDelete'];
        delete appSchema['definitions']['TreeTable'];
        delete appSchema['definitions']['AnalyticalTable'];
        delete appSchema['definitions']['GridTable'];
        delete appSchema['definitions']['GenericColumns'];
        delete appSchema['definitions']['ToolBar'];
        delete appSchema['definitions']['Actions'];
    }
    return appSchema;
}
exports.generateListReportSchemaV2 = generateListReportSchemaV2;
//# sourceMappingURL=listReport.js.map