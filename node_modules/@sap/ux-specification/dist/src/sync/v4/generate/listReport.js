"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const i18next_1 = __importDefault(require("i18next"));
const extensionLogger_1 = require("../../../extensionLogger");
const utils_1 = require("../utils/utils");
const common_1 = require("../../common");
/**
 * Generates an app specific schema for the FE V4 Listreport from the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 *
 * @param {object} genericSchema - generic JSON schema of a list report
 * @param {string} entityTypeName - the base entity type of the given page
 * @param {ConverterOutput} oDataServiceAVT - complete service information, as returned by Annotation Vocabularies Tool
 * @param {ExtensionLogger} logger - Logger class for logging messages
 * @returns {object} application-specific schema of the list report
 */
function generateListReportSchemaV4(genericSchema, entityTypeName, oDataServiceAVT, logger) {
    var _a, _b, _c, _d;
    const appSchema = JSON.parse(JSON.stringify(genericSchema));
    const entityType = oDataServiceAVT === null || oDataServiceAVT === void 0 ? void 0 : oDataServiceAVT.entityTypes.find((et) => et.name === entityTypeName);
    if (!entityType) {
        extensionLogger_1.log(logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOENTITYTYPE', { entityType: entityTypeName }),
            location: {
                path: common_1.METADATAPATH
            }
        });
    }
    else {
        const alias = common_1.findAlias(common_1.UIVOCABULARY, oDataServiceAVT);
        const lineItemAnnotation = (_b = (_a = entityType === null || entityType === void 0 ? void 0 : entityType.annotations) === null || _a === void 0 ? void 0 : _a[alias]) === null || _b === void 0 ? void 0 : _b.LineItem;
        appSchema['definitions']['Table'].properties.toolBar.$ref = `${common_1.DEFINITION_LINK_PREFIX}ToolBar<LineItems>`;
        utils_1.addLineItemsType(appSchema, lineItemAnnotation, entityType, oDataServiceAVT, 'TableColumn');
        const selectionFieldAnnotation = (_d = (_c = entityType === null || entityType === void 0 ? void 0 : entityType.annotations) === null || _c === void 0 ? void 0 : _c[alias]) === null || _d === void 0 ? void 0 : _d.SelectionFields;
        utils_1.addSelectionFields(entityType, appSchema, selectionFieldAnnotation);
        //Switch from generic column to specific definition
        appSchema['definitions']['Table'].properties['columns'].$ref = common_1.DEFINITION_LINK_PREFIX + 'LineItems';
        delete appSchema['definitions']['GenericColumns'];
        delete appSchema['definitions']['ToolBar'];
        delete appSchema['definitions']['Actions'];
        delete appSchema['definitions']['Action'];
    }
    return appSchema;
}
exports.generateListReportSchemaV4 = generateListReportSchemaV4;
//# sourceMappingURL=listReport.js.map