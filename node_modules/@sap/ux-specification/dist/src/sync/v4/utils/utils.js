"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../common/utils");
const StableIdHelper_1 = require("./StableIdHelper");
const common_1 = require("../../common");
/**
 * Processes a LineItem record of type DataFieldForCation during app schema generation
 * @param appSchema - the app specific schema that shall get enhanced
 * @param entityType - the entity type as part of the AVT ConverterOutput
 * @param actions - actions definition in schema, parent object
 * @param lineItemPath - annotation path to the line item
 * @param lineItemRecord - actual record of the line item collection
 * @param recordIndex - record index in the collection
 */
function handleActionRecord(appSchema, entityType, actions, lineItemPath, lineItemRecord, lineItemId, recordIndex) {
    // Action but not inline action
    if (lineItemRecord.Determining !== true) {
        //no footer bar -> toolbar action
        const actionDefinitionName = lineItemId === 'LineItems' ? 'ToolBarAction' : 'ObjectPageToolBarAction';
        const actionDefinition = `${actionDefinitionName}<${lineItemRecord.Action}>`;
        const description = utils_1.getDatafieldDescription(lineItemRecord, entityType);
        actions['properties'][`DataFieldForAction::${lineItemRecord.Action}`] = {
            $ref: utils_1.DEFINITION_LINK_PREFIX + actionDefinition,
            description,
            propertyIndex: recordIndex
        };
        const actionId = lineItemId === 'LineItems' ? 'ToolBarAction' : 'ObjectPageToolBarAction';
        appSchema['definitions'][actionDefinition] = JSON.parse(JSON.stringify(appSchema['definitions'][actionId]));
        appSchema['definitions'][actionDefinition].annotationPath = lineItemPath + '/' + recordIndex;
    }
}
exports.handleActionRecord = handleActionRecord;
/**
 * Adds the selection fields to the app schema, as properties of the Filterbar
 * @param entityType - the entity type as part of the AVT ConverterOutput
 * @param appSchema - the app specific schema that shall get enhanced
 * @param selectionFieldsAnnotation - the UI.SelectionField annotation
 */
function addSelectionFields(entityType, appSchema, selectionFieldsAnnotation) {
    const selectionFieldsDefinition = appSchema['definitions'].SelectionFields;
    selectionFieldsDefinition.additionalProperties = false;
    selectionFieldsDefinition.properties = {};
    selectionFieldsDefinition.annotationPath = utils_1.createAnnotationPath(entityType.fullyQualifiedName, 'com.sap.vocabularies.UI.v1.SelectionFields');
    if (!selectionFieldsAnnotation) {
        return;
    }
    let i = 0;
    selectionFieldsAnnotation.forEach((selectionField) => {
        let description = selectionField.value;
        const fieldDefinition = 'SelectionField::' + selectionField.value;
        if (selectionField.type === 'PropertyPath') {
            description = utils_1.getLabelForPropertyPath(selectionField, entityType);
        }
        selectionFieldsDefinition['properties'][fieldDefinition] = {
            $ref: utils_1.DEFINITION_LINK_PREFIX + fieldDefinition,
            propertyIndex: i
        };
        appSchema['definitions'][fieldDefinition] = {
            type: 'object',
            properties: {},
            description,
            annotationPath: `${selectionFieldsDefinition.annotationPath}/${i}`,
            isViewNode: true,
            additionalProperties: false
        };
        i++;
    });
    return;
}
exports.addSelectionFields = addSelectionFields;
/**
 * Adds the line item definition, columns and actions to the app schema (for the list report or an object page section comprising a table)
 * @param appSchema - the app specific schema that shall get enhanced
 * @param lineItemAnnotation - the UI.LineItem annotation, comprising all records
 * @param entityType - the entity type as part of the AVT ConverterOutput
 * @param {ConverterOutput} oDataServiceAVT - complete service information, as returned by Annotation Vocabularies Tool
 * @param columnDefinitionName - name of the column definition, i.e. TableColumn or ObjectPageTableColumn
 * @param actionDefinitionName - indicates the prefix for the definition, dpending on the page type
 * @param lineItemId - optional: in case of OP the paramter must be passed to distinguish the OP tables;
 *                      in case of LR or ALP no ID is passed, 'LineItems' is taken then.
 */
function addLineItemsType(appSchema, lineItemAnnotation, entityType, oDataServiceAVT, columnDefinitionName, lineItemId) {
    let schemaKey;
    appSchema['definitions'][columnDefinitionName] = JSON.parse(JSON.stringify(appSchema['definitions']['GenericColumns']['additionalProperties'].anyOf[0]));
    // Add the correct lineItem definition
    lineItemId = lineItemId || 'LineItems';
    const { actions, lineItemPath } = utils_1.addCommonLineItemDefinitions(appSchema, lineItemAnnotation, entityType, lineItemId);
    if (lineItemAnnotation) {
        const regex = '@' + utils_1.findAlias(common_1.UIVOCABULARY, oDataServiceAVT) + '.';
        let i = 0;
        lineItemAnnotation.forEach((lineItemRecord) => {
            if (lineItemRecord.$Type === 'com.sap.vocabularies.UI.v1.DataFieldForAction' &&
                (lineItemRecord.Inline !== true || lineItemRecord.Determining === true)) {
                handleActionRecord(appSchema, entityType, actions, lineItemPath, lineItemRecord, lineItemId, i);
            }
            else {
                if (lineItemRecord['Target'] && lineItemRecord['Target']['value']) {
                    lineItemRecord['Target']['value'] = lineItemRecord['Target']['value'].replace(regex, '@');
                }
                schemaKey = StableIdHelper_1.getStableIdPartFromDataField(lineItemRecord);
                if (schemaKey) {
                    appSchema['definitions'][lineItemId]['properties'][schemaKey] = {
                        $ref: utils_1.DEFINITION_LINK_PREFIX + columnDefinitionName,
                        description: utils_1.getDatafieldDescription(lineItemRecord, entityType),
                        // Custom property in schema - for object properties ordering purpose
                        propertyIndex: i,
                        annotationPath: lineItemPath + '/' + i
                    };
                }
            }
            i++;
        });
    }
}
exports.addLineItemsType = addLineItemsType;
//# sourceMappingURL=utils.js.map